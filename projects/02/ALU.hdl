// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    //using And16, Or16, and Not16, and Mux16
    //first lets make an x zero var
    Not16(in=true, out=xzero);
    Mux16(a=x, b=xzero, sel=zx, out=xstep1); //if zx is zero it'll return a, else b 
    Not16(in=xstep1, out=xneg);
    Mux16(a=xstep1, b=xneg, sel=nx, out=xstep2); //if nx is zero it'll return a, else b  
    //now manipulate y
    Not16(in=true, out=yzero);
    Mux16(a=y, b=yzero, sel=zy, out=ystep1); //if zy is zero it'll return a, else b 
    Not16(in=ystep1, out=yneg);
    Mux16(a=ystep1, b=yneg, sel=ny, out=ystep2); //if ny is zero it'll return a, else b     

    Add16(a=xstep2, b=ystep2, out=addxy);
    And16(a=xstep2, b=ystep2, out=andxy);
    //choose between add/and based off f
    Mux16(a=andxy, b=addxy, sel=f, out=fstep);
    
    //next we negate output based off of no
    Not16(in=fstep, out=fneg);
    //Mux16(a=fstep, b=fneg, sel=no, out=out);

    Mux16(a=fstep, b=fneg, sel=no, out=out, out[0..7]=out1, out[8..15]=out2, out[15]=out3);

    //next figure out values for zr and ng
    //use 2 or8way
    Or8Way(in=out1, out=orout1);
    Or8Way(in=out2, out=orout2);
    Or(a=orout1, b=orout2, out=zrout);
    Not(in=zrout, out=zr);

    //ng
    And(a=out3, b=true, out=ng);
    
}