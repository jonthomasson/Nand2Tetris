// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean color;
    static Array screen;
    static Array bits;
    
    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;
        
        let bits = Array.new(16); // TODO: reuse math's bits
      let bits[0] = 1;
      let bits[1] = 2;
      let bits[2] = 4;
      let bits[3] = 8;
      let bits[4] = 16;
      let bits[5] = 32;
      let bits[6] = 64;
      let bits[7] = 128;
      let bits[8] = 256;
      let bits[9] = 512;
      let bits[10] = 1024;
      let bits[11] = 2048;
      let bits[12] = 4096;
      let bits[13] = 8192;
      let bits[14] = 16384;
      let bits[15] = bits[14] + bits[14];
        
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        
        return;
    }

 /** Draws a pixel on the screen given an x/y coordinate */
 function void drawPixel(int x, int y) {
      var int address;
      var int bit;
      
      //all error codes can be found here: http://www.nand2tetris.org/software/OSerrors.txt
      if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
        do Sys.error(7); // Screen.drawPixel: Illegal pixel coordinates
      }

      let address = (y * 32) + (x / 16); //32 16 bit words per row
      let bit = bits[x - (x / 16 * 16)]; //bit = x % 16. The bit will tell us which
                                         //specific bit of the word we need to draw.

      if (color) { //if color is true then print black else white
        let screen[address] = screen[address] | bit; //this will turn on the pixel
      } else {
        let screen[address] = screen[address] & ~bit; //this will turn off the pixel
      }

      return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). page 258 in book.*/
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b;
        let a = 0;
        let b = 0;
        
        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
        (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) {
            do Sys.error(8); // Screen.drawLine: Illegal line coordinates
        }
        
        while((a < x2) & (b < y2)){
           do Screen.drawPixel(x1 + a, y1 + b);
           
           if((a * y2) < (b * x2)){
                let a = a + 1;
           }else{
                let b = b + 1;
           }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2).  */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        
        
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        return;
    }
}
