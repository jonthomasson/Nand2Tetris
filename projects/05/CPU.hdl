// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //taken from page 94 in book

    //first lets decode the instruction

    And(a=instruction[15], b=true, out=isc); //check whether this is a c instruction
    //figure out alu stuff
    And(a=instruction[12], b=true, out=isca); //the a compute bit
    And(a=instruction[11], b=true, out=zx);    
    And(a=instruction[10], b=true, out=nx); 
    And(a=instruction[9], b=true, out=zy); 
    And(a=instruction[8], b=true, out=ny); 
    And(a=instruction[7], b=true, out=f); 
    And(a=instruction[6], b=true, out=no); 
    And(a=instruction[5], b=true, out=desta); //destination bits
    And(a=instruction[4], b=true, out=destd);
    And(a=instruction[3], b=true, out=destm);
    And(a=instruction[2], b=true, out=jneg); //jump bits
    And(a=instruction[1], b=true, out=jzero); 
    And(a=instruction[0], b=true, out=jpos);   

    Mux16(a=instruction, b=aluout, sel=isc, out=toa);
    //If is a instruction then need to load to A register
    Not(in=isc,out=isa);
    Or(a=desta, b=isa, out=loada);
    ARegister(in=toa, load=loada, out=outa, out[0..14]=addressM); //not sure about addressM 15

    Mux16(a=outa, b=inM, sel=isca, out=toalu);
    ALU(x=fromd,y=toalu,zx=zx,nx=nx,zy=zy, ny=ny,f=f,no=no,out=outM, out=aluout, zr=aluzr, ng=alung);

    And(a=destd, b=isc, out=loadd); //if destd set and is c instruction then load d register
    DRegister(in=aluout, load=loadd, out=fromd); //this feeds back to alu

    //figure out jump
    And(a=jneg, b=alung, out=jumpneg);
    And(a=jzero, b=aluzr, out=jumpzero);

    //if jpos is true and alu returned positive num...
    Or(a=aluzr, b=alung, out=aluzrorng); 
    Not(in=aluzrorng, out=aluispos);
    And(a=jpos, b=aluispos, out=jumppos);

    //Or results to figure out if we should load new value to jump to
    Or(a=jumpneg, b=jumpzero, out=jumpnegorzr);
    Or(a=jumpnegorzr, b=jumppos, out=needsjump);

    //inc only if we're not jumping...
    And(a=needsjump, b=isc, out=performjump);
    Not(in=performjump, out=needsinc);

    PC(in=outa, reset=reset, load=performjump, inc=needsinc, out[0..14]=pc);
    
    //if this is the a instruction ignore this
    And(a=destm, b=isc, out=writeM);
}